.include "C:\Users\kanan\Desktop\Comp Struct\50002\50002\nominal.jsim"
.include "C:\Users\kanan\Desktop\Comp Struct\50002\50002\stdcell.jsim"
.include "C:\Users\kanan\Desktop\Comp Struct\50002\50002\lab5ctl.jsim"

.subckt ctl reset id[31:26] ra2sel bsel alufn[5:0] wdsel[1:0] werf moe wr
xctl vdd 0 0 id[31:26]

+ xpcsel[2:0] wasel asel ra2sel bsel alufn[5:0] wdsel[1:0] werf moe xwr
+ $memory width=18 nlocations=64 contents=(
+ 0b011100000000000100 
+ 0b011100000000000100 
+ 0b011100000000000100 
+ 0b011100000000000100 
+ 0b011100000000000100 
+ 0b011100000000000100 
+ 0b011100000000000100 
+ 0b011100000000000100
+ 0b011100000000000100 
+ 0b011100000000000100 
+ 0b011100000000000100 
+ 0b011100000000000100 
+ 0b011100000000000100 
+ 0b011100000000000100 
+ 0b011100000000000100 
+ 0b011100000000000100 
+ 0b011100000000000100 
+ 0b011100000000000100 
+ 0b011100000000000100 
+ 0b011100000000000100 
+ 0b011100000000000100 
+ 0b011100000000000100 
+ 0b100100000000000100 
+ 0b011100000000000100 
+ 0b000000100000010110 // LD 
+ 0b000001100000000001 // ST 
+ 0b011100000000000100 
+ 0b010000000000000100 // JMP
+ 0b011100000000000100 
+ 0b000000000000000100 // BEQ 
+ 0b001000000000000100 // BNE 
+ 0b000010001101010110 // LDR 
+ 0b000000000000001100 // ADD 
+ 0b000000000000101100 // SUB 
+ 0b011100000000000100 // MUL
+ 0b011100000000000100 // DIV
+ 0b000000011001101100 // CMPEQ 
+ 0b000000011010101100 // CMPLT 
+ 0b000000011011101100 // CMPLE
+ 0b011100000000000100 
+ 0b000000001100001100 // AND 
+ 0b000000001111001100 // OR 
+ 0b000000001011001100 // XOR 
+ 0b011100000000000100 
+ 0b000000010000001100 // SHL 
+ 0b000000010000101100 // SHR 
+ 0b000000010001101100 // SRA 
+ 0b011100000000000100 
+ 0b000000100000001100 // ADDC 
+ 0b000000100000101100 // SUBC 
+ 0b011100000000000100 // MULC
+ 0b011100000000000100 // DIVC
+ 0b000000111001101100 // CMPEQC 
+ 0b000000111010101100 // CMPLTC 
+ 0b000000111011101100 // CMPLEC
+ 0b011100000000000100 
+ 0b000000101100001100 // ANDC 
+ 0b000000101111001100 // ORC 
+ 0b000000101011001100 // XORC 
+ 0b011100000000000100 
+ 0b000000110000001100 // SHLC 
+ 0b000000110000101100 // SHRC 
+ 0b000000110001101100 // SRAC 
+ 0b011100000000000100 
+ )

*Reset mux
*if reset=1, wr=0
*else sr=xwr
Xreset_mux reset xwr 0 wr mux2

// Check for BEQ: 011101
XBEQ1 id[31] flipped_id31 inverter
XBEQ2 id[27] flipped_id27 inverter
XsubBEQ1 flipped_id31 id[30] id[29] id[28] sub1 and4
Xis_BEQ sub1 flipped_id27 id[26] is_BEQ and3

// BNE
XBNE1 id[26] flipped_id26 inverter
Xand4_BNE flipped_id31 id[30] id[29] id[28] subBNE and4
Xis_BNE subBNE id[27] flipped_id26 is_BNE and3

.connect z 0 // Remember to uncomment this in STEP 2

// XPCSEL BEQ postprocessing
Xz_BEQmux z#3 xpcsel[2:0] 0#2 vdd pcsel_beq[2:0] mux2

// XPCSEL BNE postprocessing
Xz_BNEmux z#3 xpcsel[2:0] 0#3 pcsel_bne[2:0] mux2

//PCSEL overall processing
.connect is_BEQ muxsel[0]
.connect is_BNE muxsel[1]
Xpcselmux muxsel[0:1]#3 xpcsel[2:0] pcsel_beq[2:0] pcsel_bne[2:0] 0#3 pcsel[2:0] mux4

.ends
