| include instruction macros and test jig
.include ./50002/50002/beta.uasm
.include ./50002/50002/lab6checkoff.uasm

count_bull_cows:         | your subroutine must have this name
	PUSH(LP)		 | standard subroutine entry sequence
	PUSH(BP)
	MOVE(SP, BP)

	PUSH(R1) | BULLS
	PUSH(R2) | COWS
	PUSH(R3) | i
	PUSH(R4) | j
	PUSH(R5) | btemp
	PUSH(R6) | atry
	PUSH(R7) | btry
	PUSH(R8) | mask
	PUSH(R9) | a
	PUSH(R10)| b
	PUSH(R11)| Temp value 1 (IF statements)
	PUSH(R12)| Temp value 2
	PUSH(R13)| Temp value 3
	PUSH(R14)| Temp value 4 (IF statement)

	LD(BP,-12,R9) | Load int a
	LD(BP,-16,R10)| Load int b 

	CMOVE(0,R1) | ADDC -- bulls = 0
	CMOVE(0xF,R8) | ADDC -- mask = 0xF

	CMOVE(0,R3) | initialise i=0
	BR(end1) 

	for1:
		ADDC(R3,1,R3) | i++

		|Starts if checking
		AND(R9,R8,R12) | (a & mask)
		AND(R10,R8,R13) | (b & mask)
		CMPEQ(R12,R13,R11)
		BNE(R11,if1,R31)

		SHLC(R8,5,R8)

	if1:
		ADDC(R1,1,R1) | bulls = bulls + 1
		OR(R9,R8,R9) | a = a | mask
		OR(R10,R8,R10) | b = b | mask

	end1:
		CMPLT(R3,4,R11) | check if i<4 
		BNE(R11,for1,R31)

		CMOVE(0,R2) | cows = 0
		CMOVE(0,R3) | initialise i=0
		BR(end2) | Go to the next for loop

	for2:
		ADDC(R3,1,R3) | i++
		ANDC(R9,0XF,R6) | atry = a & 0xF
		SHRC(R9,4,R9) | a = a >> 4
		CMPEQ(R6,0XF,R11) | if(atry != 0xF)
		BEQ(R11,if2,R31)


	if2:
		MOVE(R10,R5)
		CMOVE(0xF,R8)
		CMOVE(0,R4) | initialise j = 0
		BR(end3)

	for3:
		ADDC(R4,1,41) | j++
		ANDC(R5,0XF,R7) | btry = btemp & 0xF
		SHRC(R5,4,R5) | btemp = btemp >> 4
		CMPEQ(R7,R6,R12) | if(btry == atry)
		BNE(R12, if3)
		SHLC(R8,4,R8) | mask = mask << 4

	if3:
		ADDC(R2,1,R2) | cows = cows + 1
		OR(R10,R8,R10) | b = b | mask
		BR(end3) | BREAK	

	end3:
		CMPLTC(R4,4,R14)
		BNE(R14,for3,R31)

	end2:
		CMPLTC(R3,4,R11) | check if i<4 
		BNE(R11,for2,R31)

		SHLC(R1,4,R0) | bulls << 4
		ADD(R0,R2,R0) | return (bulls << 4) + cows
	POP(R14)
	POP(R13)
	POP(R12)
	POP(R11)
	POP(R10)
	POP(R9)
	POP(R8)
	POP(R7)
	POP(R6)
	POP(R5)
	POP(R4)
	POP(R3)
	POP(R2)
	POP(R1)

	MOVE(BP,SP)        | standard subroutine exit sequence
	POP(BP)
	POP(LP)
	RTN()

StackBase: LONG(.+4)     | Pointer to bottom of stack
	. = .+0x1000	 | Reserve space for stack...

